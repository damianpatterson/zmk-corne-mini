#include "zmk-helpers/helper.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#ifndef LH2
  #define THUMBS LH1 LH0 RH0 RH1         // Thumbs on 34 keys.
#else
  #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.
#endif

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

/ {
    behaviors {
        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3 1>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9 10>;
        };

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <28 27>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <26 27>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 15 13>;
        };

        exclm {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dllr {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percnt {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        and {
            bindings = <&kp AMPS>;
            key-positions = <7 19>;
        };

        str {
            bindings = <&kp ASTRK>;
            key-positions = <8 20>;
        };

        leftparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <9 21>;
        };

        rightparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <10 22>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&trans  &kp Q               &kp W           &kp E           &kp R             &mt LEFT_PARENTHESIS T    &mt RIGHT_PARENTHESIS Y  &kp U              &kp I            &kp O            &kp P                        &trans
&trans  &hm LEFT_CONTROL A  &hm LEFT_ALT S  &hm LEFT_GUI D  &hm LEFT_SHIFT F  &mt LEFT_BRACKET G        &mt RIGHT_BRACKET H      &hm RIGHT_SHIFT J  &hm RIGHT_GUI K  &hm RIGHT_ALT L  &hm RIGHT_CONTROL SEMICOLON  &trans
&trans  &kp Z               &kp X           &kp C           &kp V             &mt BACKSLASH B           &mt MINUS N              &kp M              &kp COMMA        &kp DOT          &kp FSLH                     &trans
                                            &kp LG(SPACE)   &lt 1 ESCAPE      &kp SPACE                 &kp RET                  &lt 2 TAB          &kp BACKSPACE
            >;
        };

        NAV {
            display-name = "Nav";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&trans  &kp N1                &kp N2           &kp N3           &kp N4             &kp N5          &kp LESS_THAN     &kp LEFT_BRACKET            &kp LEFT_BRACE          &kp LEFT_PARENTHESIS       &kp SEMICOLON          &trans
&trans  &hm LEFT_CONTROL N6   &hm LEFT_ALT N7  &hm LEFT_GUI N8  &hm LEFT_SHIFT N9  &kp N0          &kp LEFT_ARROW    &hm RIGHT_SHIFT DOWN_ARROW  &hm RIGHT_GUI UP_ARROW  &hm RIGHT_ALT RIGHT_ARROW  &hm RIGHT_CONTROL SQT  &trans
&trans  &kp NON_US_BACKSLASH  &kp MINUS        &kp EQUAL        &kp SLASH          &kp ASTERISK    &kp GREATER_THAN  &kp RIGHT_BRACKET           &kp RIGHT_BRACE         &kp RIGHT_PARENTHESIS      &kp GRAVE              &trans
                                               &kp LGUI         &trans             &kp SPACE       &kp RET           &trans                      &trans
            >;
        };

        SYM {
            display-name = "Sym";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL          &kp AT          &kp HASH               &kp DLLR            &kp PRCNT    &kp CARET  &kp AMPS               &kp ASTRK           &kp LEFT_PARENTHESIS    &kp RPAR                &trans
&trans  &kp LEFT_CONTROL  &kp LEFT_GUI    &hm LEFT_GUI UP_ARROW  &hm LEFT_SHIFT SQT  &kp GRAVE    &kp MINUS  &hm RIGHT_SHIFT EQUAL  &hm RIGHT_ALT LBKT  &hm LS(RIGHT_GUI) RBKT  &hm RIGHT_CONTROL BSLH  &trans
&trans  &trans            &kp LEFT_ARROW  &kp DOWN_ARROW         &kp RIGHT_ARROW     &kp TILDE    &kp UNDER  &kp PLUS               &kp LBRC            &kp RBRC                &kp PIPE                &trans
                                          &kp LGUI               &trans              &kp SPACE    &kp RET    &trans                 &kp BACKSPACE
            >;
        };

        ADJ {
            display-name = "System";
            bindings = <
&trans  &kp F1        &kp F2         &kp F3        &kp F4      &kp F5            &kp F6  &kp F7                   &kp F8         &kp F9  &kp F10      &trans
&trans  &hm LGUI F11  &hm LSHFT F12  &trans        &trans      &studio_unlock    &trans  &kp LC(LEFT)             &kp LC(RIGHT)  &trans  &trans       &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_CLR  &bt BT_CLR_ALL    &trans  &kp LS(LC(KP_NUMBER_4))  &trans         &trans  &bootloader  &trans
                                     &trans        &trans      &trans            &trans  &trans                   &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        l3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
